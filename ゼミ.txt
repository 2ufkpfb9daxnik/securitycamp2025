L1『Rust 検証器自作ゼミ』
担当講師
松下 祐介
分野・キーワード
Rust
形式検証
論理
コンパイラ
言語処理系
講義概要
現代、私たちの暮らしを様々な場所で支えているソフトウェア。そうしたソフトウェアの中に忍び込む「バグ」は、
社会における脅威とすらなりえます。

2015年に生まれた「Rust」は、C/C++ のように低レベルのメモリ・スレッド操作を許しながら、
「所有権型」という強力な仕組みによって高い安全性を実現する、画期的な言語です。
これまで C/C++ で書かれたソフトウェアは有名な Heartbleed を含む多くの深刻な脆弱性をもたらしていました。
Rust はそうした領域で脆弱性を防げると、広く期待されていて、産業界でも注目を集めています。

更に先進的なアプローチとして、「形式検証」があります。これは、ソフトウェアのソースコードを論理の力で解析して、
バグがないことを証明する技術です。特に、航空機・宇宙開発など、バグが致命的になりうる場所で、形式検証が実用されています。
近年、Rust プログラムに対する形式検証が注目されています。特に、
Microsoft Research のプロジェクトから生まれた「Verus」という Rust 検証器が最近活躍しています。

Verus GitHub
このゼミでは、Rust プログラムに対する自作の形式検証器を Rust で開発していきます。特に、
自作の検証器で面白い Rust プログラムを検証できるようにすることを目指します。具体的にどのような検証器にするかは、
皆さんに自由に考えてもらおうと思います。チャレンジングではありますが、Rust コンパイラの内部表現、
Rust の所有権型の仕組み、実践的な形式検証などを学べる、刺激的で充実したゼミになると思います。
意欲溢れる皆さんの応募を待っています！！

## 参考: 昨年の講義

私が昨年講師を務めた、セキュリティ・キャンプ全国大会 2024 開発コース「S15 Rust プログラム検証ゼミ」では、
受講生2人に自作の Rust プログラム検証器を作ってもらいました。

昨年の様子（X）
これについて、受講生の1人のisanさんが詳しいブログ記事を書いてくれたので、ぜひ読んでみてください。

「Rustで預言を使ったプログラム検証器を自作しよう」




L4『Cコンパイラゼミ』
担当講師
佐藤 弘崇
分野・キーワード
コンパイラ
言語処理系
C言語
アセンブリ
講義概要
普段何気なく書いているプログラミング言語というものが、いったいどうやって実装されているのか、
気になったことがある人も多いでしょう。プログラムを書く人であればコンパイラはそれなりに身近な存在かと思いますが、
コンパイラが内部で何をしているのか、どのようにできているのかという点に目を向けてみたらますます面白いと思いませんか？

本ゼミでは、C言語のソースコードを受け取って対応するアセンブリを出力する「Cコンパイラ」をゼロから自作します。
自分の力でゼロからCコンパイラを作り上げていくことで、身近で遠い存在だったコンパイラの中身がどんどんと明らかになり、
C言語の仕様やアセンブリの知識も自然と身についていきます。

コンパイラなどという複雑怪奇で大きなソフトウェアを作るなんて大変そうだと思うかもしれませんし、
実際簡単なことではありません。ですが、最初は極限まで小規模なものから始め、そこから少しずつ機能を増やしていくので、
実装・テスト・デバッグの繰り返しを続けるうちにどんどんコンパイルできるコードが増えていきます。
あっという間に書いている本人よりもコンパイラの方が賢くなっていって驚くことでしょう。その過程を十全に楽しめるよう、
大会期間前には多めに事前学習期間を設けてじっくりと開発できるようにします。
実装のためのテクニックやC言語のややこしい仕様に関するフォロー、
豊富なテストの提供やデバッグなどといった様々な面でサポートしていきますので、ご安心ください。

C言語は長年にわたって多岐にわたる使われ方をしてきた言語ですから、
Cコンパイラを自作することにより様々な目標を狙うことができます。たとえば、
自作コンパイラのソースコードを自作コンパイラ自身でコンパイルする「セルフホスト」。
自分のコードのバグが予測外の箇所に悪影響を及ぼし、頭を抱えながらバグを探す経験は、
セルフホスト以外ではなかなか味わえない醍醐味と言えるでしょう。他にも、
既存のOSSの大きなコードを動かすことを目標としても面白いでしょう。
そんなのをコンパイルできるほど完成度を上げるなんて気が遠くなると思うかもしれませんが、
穴だらけの自作コンパイラであっても実は既存資産が結構読めたり動かせたりします。
他人の書いた実用的なコードをコンパイルする過程で自分の実装の思わぬミスを見つけることができるため、
何を動かせて何をまだ動かせないか調べていくことでコンパイラがどんどん磨かれていきます。

もちろん、これらの目標を達成できるコンパイラを作るには、それなりに多くの構文や仕様に対応する必要がありますし、
出力される大量のアセンブリをかき分けてデバッグする必要もあり、決して簡単な道筋ではありません。しかしながら、
このゼミを通じて、低レイヤと高レイヤの橋渡しをするための共通言語としての地位を確立している言語である C 言語と
必ずや真剣に向き合うことができるでしょう。皆さんが今後どのような道を進むのかは我々には知るよしもありませんが、
そのような経験は、今後いかなる方面でセキュリティや低レイヤに触れようとも必ず役立つものとなると信じております。
皆さんの応募、お待ちしております。




X1『IoT/組込み機器のリバースエンジニアリングゼミ』
担当講師
清水 脩士
分野・キーワード
IoT
解析
ハードウェア
講義概要
本ゼミでは、IoT/組込み機器のリバースエンジニアリングを通して、ハードウェアおよびファームウェアの解析技術を実践的に学びます。
基板からの情報収集や各種通信プロトコルの調査、ファームウェアの抽出等基本的な解析手法を学んだ後、
受講者が選んだ機器を対象に実際の解析に取り組んでいただきます。

幅広い技術レイヤーに触れ試行錯誤を重ねながら機器を解析する経験は、皆さんが今後直面するであろう複雑な技術課題に対し
多角的に解決策を見出す力を育むために役立つものと思います。

仕組みを知ること・解析することに興味がある方、ものづくりが好きな方、ハードウェアに触れてみたい方からの応募をぜひお待ちしています。




X2『ハードウェア魔改造ゼミ』
担当講師
末田 卓巳
分野・キーワード
改造
Linux
工作
IoT
Web
電気回路
講義概要
本ゼミでは、市販の無線ルーターに部品をくっつけてラジコンに変貌させます。その過程で、
電気回路からHTTPに至る全てのレイヤーに触れるため、コンピューターを構成する技術スタックの全体像を具体的に知ることができます。
電波法令に定められた技術基準適合証明（いわゆる「技適」）への対応も含むので、魔改造にあたって遵守する事柄も同時に理解できます。

コードは書けるけど低いレイヤーに触れたことがない、一風変わった技術の学び方に興味がある、見た目に楽しいハードを作ってみたい、
改造の具体的手法が知りたい…といった方を主に想定しています。





Y1『Code Sanitizer・Fuzzer自作ゼミ』
担当講師
松浦 幹人
講義概要
Code Sanitizerとは、コンパイル時に追加の命令を挿入することでプログラム中のバグを実行時に検出する
コンパイラ内蔵機能のことです。

サニタイザは、検出されるバグの種類によりいくつかの種類に分類できるのですが、
代表的なものはアドレスサニタイザ(ASan)といい、ポインタの扱いを誤ることなどによるメモリ管理のバグを発見することができます。

他方のFuzzerは、(半)自動的に生成された入力をプログラムに与えることでソフトウェアをテストする手法を指します。

この手法にも多数の種類が存在しますが、サニタイザと同様にコンパイル時に追加の命令を挿入することで
より効率的にテストケースを生成する手法が多数提案されています。

そして、これら2つの機能は同時に使用することが可能で、サニタイザの併用によりFuzzerによるバグの検出率が高まるため、
実世界でもよく利用される組み合わせとなっています。

「そんなもの使ったこともない！」と思うかもしれませんが、静的検査では検知できないバグも発見することができるため、
LinuxやChromiumの開発などにも使われている便利機能となっています。

本ゼミは、既存のコンパイラを改造することで手っ取り早くサニタイザやFuzzerのような付加的機能を実装する部分を楽しむことを
目標としています。

大会期間中には、サニタイザまたはFuzzer、あるいはその両方を受講生のすきな形で実装していこうと思っています。

これらの実装には、コンパイラ側のコード生成の改造とともに、時として`malloc()`などのランタイムライブラリの変更が
必要となるため、双方に関する知見を深める良い機会になると信じています。

コンパイラに興味がある方、ランタイムでの保護に興味がある方、それらに限らず、皆さんのご応募をお待ちしております。





Y2『CDN自作ゼミ』
担当講師
上野 康平
講義概要
【趣旨】
Webサービスやアプリのバックエンドにおいて、Content Delivery Network (CDN)を使うことが一般的になっています。
しかし、CDNそのものがどのような仕組みで動いているのか、意識したことはありますか？
本ゼミでは、CDNの要素技術を実際にみなさんにコーディングいただくことで、CDNをフルスクラッチ自作できる
自信を持っていただければと思います。

【講義の流れ】
キャンプ当日を盛り上げるため、基礎知識の座学や開発環境の整備は、事前学習という形で、キャンプ前にすませられればと思います。
キャンプ当日は、安価なコンピュータとネットワーク機器を組み合わせて、物理的にミニCDNを講義会場で作ることを目標とできればと思います。
うまく動作までこぎつけた後は、みなさまと時間の許す限り皆様の興味やバックグラウンドに応じて、ミニCDNをいろいろな形で進化させられればと思います。

【受講者への想定】
みなさまのバックグラウンドや興味に応じて柔軟に対応いたします。
プログラミング言語について、特に制約はありませんが、サンプルプログラムはGo、C言語での提供となりますので、
これらの言語で書かれたプログラムが読めることが望ましいです。





Y3『探査機自作ゼミ』
担当講師
坂本 優太
講義概要
一緒に探査機を作ってみませんか？

このゼミでは惑星探査機の開発を題材として、複雑な問題への向き合い方を手を動かしながら考えます。
つまり、目の前に明らかに存在する問題だけでなく、その背景にあるメタな問題を発見し、自らの認識、方法論、手札を
アップデートしながら開発を進めていくという営みにチームで一丸となって取り組みます。

惑星探査機や人工衛星、宇宙開発と聞くと、一見遠い世界のことのように思うかもしれません。
しかし、現代の我々は宇宙と切っても切れない関係にあります。便利な天気予報は気象衛星があってこそですし、
スマートフォンの位置情報取得機能はGPS/GNSS衛星によって成り立っています。地震や洪水などの災害時においても、
地形がどのように変化したかといった観測による人工衛星の役割は非常に大きなものとなっています。

即座に生活の役に立つものではなくとも、人類の知や活動の領域を押し広げるという面でも宇宙は大きな領域です。
我々が理科の教科書などで月の裏側や太陽系の惑星の詳細な様子を知っているのも、
人類がそこまで探査機を送り込んできたからです。近年では、「はやぶさ2」のカプセルの帰還や、
小型月着陸実証機の SLIM の成功なども話題になりました。

そんな宇宙機ですが、みなさんはこういったものがどのような仕組みで動いているか、
どのように作られているか考えてみたことはあるでしょうか？

宇宙機は非常に複雑なシステムです。なぜ非常に複雑なのかと言えば、考えなければならないことが非常に多いからです。
まず 、宇宙にコンセントはありません。そのため、自分で発電能力を持つ必要があります。
ほとんどの場合は発電手段として太陽光発電を用いますが、これはそこまでパワーのある発電手段ではなく、
使える電力にかなりの制限がかかります。太陽光発電ができたら発電自体は安泰というわけでもなく、
適切に太陽の方向を向くように制御しないといけません。その制御がうまくいかなかったら空飛ぶ文鎮です。
また、そもそも制御するためには自分が向いている方向や太陽の方向をどうにかして得ないといけません。
足場も無い環境で、どうやって自分の姿勢や位置を把握しましょうか？さらに、素朴にずっと太陽の方向を向いていても、
それはそれで放熱ができず部品の温度が高くなりすぎて不可逆的に破壊されてしまうかもしれません。

このように非常に複雑なシステムは、一人で作ることはほぼ不可能です。機械的な構造、熱や電力の収支、姿勢決定、姿勢制御、
コンピュータ・ボード、そしてソフトウェアなどすべてを設計し、開発しなければなりません。太陽光発電の例からも分かるように、
このそれぞれかなり別々の専門領域を持った人間同士が適宜連携し、調整しながら開発を行う必要があるのです。

つまり、多分野の個々の高い技術が必要になるだけでなく、それらを適切に連携させる必要があります。
この点において、個別の技術とは異なる別の難しさがあるのです。この複雑な連携のための方法論として、
システムズ・エンジニアリングという分野があるのですが、
これはアポロ計画、つまり実際の宇宙開発プロジェクトを大きな契機として発達しています。

このゼミでは、模擬的な惑星探査機の自作を通して、システムズ・エンジニアリング的な観点を持ちながらのチーム開発を体感してもらいます。
他の受講生と、そして講師と協力しながら、ひとつの探査機という複雑なシステムを作っていきましょう。
自分が得意なレイヤより上や下のレイヤ、別の人が開発しているサブシステム、システム全体、
開発体制のことを考えながらものづくりをする経験は、宇宙開発に限らず、あなたが将来大きなものづくりに関わる時に確実に役に立つと信じています。
皆さんの応募をお待ちしています。

【ミッション概要】
火星のような地球型惑星のことを考えましょう。
この惑星には既に周回軌道上に探査機が送り込まれており、データが送られてきています。ただし、
周回軌道上からの観測手段や精度は限られており、現地に降りてみないと分からないこともたくさんあります。

そこで今進行しているのが着陸型の探査機の開発プロジェクトです。着陸機を開発するのは技術的にもコスト的にも大変なので、
とても大きなプレッシャーがかかっています。あまりリスクは取れません。確実に何かがありそうなことが分かっているもののみを調査したいです。
とはいえ、降りてみないと分からないことがあるから着陸してみるのに、降りずに判断したもののみを調査するのはある種本末転倒です。

この問題を解決するため、この着陸機には子機を搭載することになりました。子機は着陸後に親機から分離し、
親機とは別に行動します。子機であれば、親機よりもリスクを取ってチャレンジングな探査ができることでしょう。
みなさんのチームはこの子機を開発することになりました。

【受講を考えている方へ】
ものづくりが好きな人、問題の発見・解決が好きな人を歓迎します。

宇宙開発はあくまで題材なので、宇宙関係の知識や興味は特に要求しません（あるとより楽しめるかもしれません）。

このゼミで自作する探査機は色々とデータを取得したり、移動したりすることが求められます。そのため、
各種センサやアクチュエータをマイコンで制御することになります。この探査機本体の制御や、
探査機とやりとりする地上局側において、ソフトウェア開発をすることになるわけです。

このゼミではチーム開発を行い、ハードウェアも扱う都合上、ゼミや開発の大部分を事前学習期間中に行うことになります。
事前学習期間中は最低週1回程度、適宜オンラインで会話する機会を設けたいと考えています。そのため、
余裕を持った予定の確保・確認をお願いします。実際の予定調整は受講生同士の都合などもあるため柔軟に行います（無理はせず、テスト期間などでは学業を優先してください）。

ハードウェア部分については、みなさんがあまり慣れていないであろうという勝手な予測や、モノのリードタイムなどの都合から、
ある程度講師の方で用意しています。これはつまり、講師はハードウェア開発を担当するみなさんのチームの一員だということです。
講師は経験者であるという一日の長はありつつ、ただの調整相手のひとりです。そしてもちろん、
みなさんがハードウェア開発をしてはいけない道理もまったくありません（むしろ歓迎します）。
このゼミに答えはありません。ただし、期間中にあらゆることをやりたくなると時間があっという間になくなるので、
そこは気を付けましょう。

ソフトウェアの開発には Rust とC言語を用います。そのため，C言語の基礎的な文法は一通り分かっていて、
自力でなにかしらのプログラムを書いて動かした経験があることが望ましいです。
Rust については入門からサポートしますが、『The Rust Programming Language』や『The Rustonomicon』
『The Embedded Rust Book』などをなんとなくでも読んだりやったりしておいてもらえると、
スムーズに実践的な開発ができる時間が増えると思います。

ただし、Rust や C言語の経験がなくとも、応募後や事前学習期間中に自走できる熱意がある場合は応募をためらわないでください。

また、受講にあたり、『Kerbal Space Program』ないし『Kerbal Space Program 2』を多少プレイしておくと、
「宇宙開発」がどのような世界観か分かりやすくなるかもしれません。ただし、
ハマって時間を溶かして応募できなくなってしまうと本末転倒なので、プレイするのは応募後にしましょう。
お金に余裕が無い人や、ハマりすぎてしまうのが怖い人は、ニコニコ動画や YouTube にあるCeVIO実況プレイ動画を
いくつか観てみると面白いと思います。個人的なおすすめは『Kerbal宇宙開発日誌~ニコニコ重工~』です。
これらも量が多いので観すぎに注意ですが、チラっと見る分には気分転換や応募課題の参考にもなるかもしれません。

『Kerbal宇宙開発日誌~ニコニコ重工~』（ニコニコ動画）
最後に、去年の探査機自作ゼミについての講師のブログ記事のリンクを貼っておきます。
受講生のみなさんと一緒に作り上げるゼミなので同じようなことになるかは分かりませんが、
雰囲気は伝わるのではないかと思います。

セキュリティ・キャンプ2024全国大会で「探査機自作ゼミ」をやった（はてなブログ）